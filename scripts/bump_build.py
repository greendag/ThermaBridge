"""Pre-build script for PlatformIO: bump a build counter and generate src/build_info.h

This script derives the base MAJOR.MINOR from `src/build_info.h` (if present) and increments
the local `.build_count` file to produce `FW_VERSION = vMAJOR.MINOR.BUILD` in
`src/build_info.h`.

It is safe to run repeatedly; `.build_count` is stored in the project root (not committed by
default) so builds increment the build number without modifying tracked source files.
"""
import os
import json
import re

project_dir = os.getcwd()
build_count_file = os.path.join(project_dir, '.build_count')
build_info_h = os.path.join(project_dir, 'src', 'build_info.h')


def read_fw_base_from_header():
    # Try to read FW_BASE_VERSION from existing header to preserve MAJOR.MINOR
    if not os.path.exists(build_info_h):
        return ''
    try:
        with open(build_info_h, 'r', encoding='utf-8') as f:
            for line in f:
                if 'FW_BASE_VERSION' in line:
                    m = re.search(r'"(v\d+\.\d+)"', line)
                    if m:
                        return m.group(1)
    except Exception:
        pass
    return ''

def read_fw_base():
    # Prefer the header FW_BASE_VERSION if present
    hdr = read_fw_base_from_header()
    if hdr:
        return hdr
    # No fallback: header is the canonical source of base version
    return ''

def parse_base(fw):
    # match vMAJOR.MINOR(.PATCH)?
    m = re.match(r'v(\d+)\.(\d+)(?:\.(\d+))?', fw)
    if m:
        major = int(m.group(1))
        minor = int(m.group(2))
        return major, minor
    return 1, 0

def read_build_count():
    if not os.path.exists(build_count_file):
        return 0
    try:
        with open(build_count_file, 'r', encoding='utf-8') as f:
            return int(f.read().strip() or '0')
    except Exception:
        return 0

def write_build_count(n):
    with open(build_count_file, 'w', encoding='utf-8') as f:
        f.write(str(n))

def write_build_info(major, minor, build):
    version = f'v{major}.{minor}.{build}'
    content = f"""// This file is generated by scripts/bump_build.py - do not edit
#pragma once
#define FW_VERSION \"{version}\"
#define FW_BASE_VERSION \"v{major}.{minor}\"
#define FW_BUILD_NUMBER {build}
"""
    with open(build_info_h, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f'Generated {build_info_h} with FW_VERSION={version}')
    # Intentionally do NOT write version info into data/config.json anymore.
    # The canonical version information now lives in src/build_info.h.

def main():
    fw = read_fw_base()
    major, minor = parse_base(fw)
    count = read_build_count()
    count += 1
    write_build_count(count)
    write_build_info(major, minor, count)

if __name__ == '__main__':
    main()
